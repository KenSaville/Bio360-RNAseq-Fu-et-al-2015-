---
title: "RNAseq walkthrough"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).

## **Mouse mammary gland dataset**

This is a walkthrough of the R code used to run the RNA seq analysis on mammary gland development.

The data for this tutorial comes from a Nature Cell Biology paper, [*EGF-mediated induction of Mcl-1 at the switch to lactation is essential for alveolar cell survival*](http://www.ncbi.nlm.nih.gov/pubmed/25730472) (Fu et al. 2015). Both the raw data (sequence reads) and processed data (counts) can be downloaded from Gene Expression Omnibus database (GEO) under accession number [GSE60450](http://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE60450).

This study examines the expression profiles of basal stem-cell enriched cells (B) and committed luminal cells (L) in the mammary gland of virgin, pregnant and lactating mice. Six groups are present, with one for each combination of cell type and mouse status. Each group contains two biological replicates. We will first use the counts file as a starting point for our analysis. This data has already been aligned to the mouse genome. The command line tool featureCounts (Liao, Smyth, and Shi 2014) was used to count reads mapped to mouse genes from Refseq annotation (see the [paper](http://www.ncbi.nlm.nih.gov/pubmed/25730472) for details).

See this link for original R code

<https://combine-australia.github.io/RNAseq-R/06-rnaseq-day1.html>

# **Overview**

This RNA analysis includes the following steps

-   Reading in table of counts

-   Adding annotation

-   Filtering lowly expressed genes

-   Quality control

-   Normalisation for composition bias

-   Differential expression analysis

-   Testing relative to a threshold

-   Visualisation

-   Gene set testing

# **Bioconductor/R Packages**

Packages used:

-   limma

-   edgeR

-   Glimma

-   org.Mm.eg.db

-   gplots

-   RColorBrewer

To install the packages:

-   [Install](https://bioconductor.org/install/#install-R) the latest release of R. This version of the tutorial uses R 4.0.

-   Get the latest version of Bioconductor and packages by starting R and entering the commands:

    First install th bioconductor package managere BiocManager

    ```{r}

    if (!requireNamespace("BiocManager"))
        install.packages("BiocManager")

    ```

Next install the RNAseq packages neeeded for the analysis. Before you do this, increase the RAM available to your posit cloud instance. To do this click the gear icon in the upper right corner of the posit window (to the left of your name). Click on resources, then slide the slider oto the right, increasing the RAM to 3 GB.

Be sure to click APPLY CHANGES

After we load the following packages we will reset this to 1 GB.

```{r}

BiocManager::install(c("limma", "edgeR", "org.Mm.eg.db", "gplots", "RColorBrewer", "NMF", "BiasedUrn"))

```

Install Glimma. Glimma has some problems installing sometimes. Let's do that one separately.

```{r}

BiocManager::install("Glimma")
```

```{r}

```

Load the above packages

```{r}

library(edgeR)
library(limma)
library(Glimma)
library(org.Mm.eg.db)
library(gplots)
library(RColorBrewer)
library(NMF)

```

Reset the RAM to 1. Be sure to click APPLY CHANGES.

Now let's read in the data, which has been already uploaded into the data folder.

## **Reading in the data**

```{r}

# Read the data into R 
seqdata <- read.delim("/cloud/project/data/GSE60450_LactationGenewiseCounts.txt")

# Read the sample information into R 
sampleinfo <- read.delim("/cloud/project/data/SampleInfo.txt", stringsAsFactors = TRUE)

```

Let’s take a look at the data. You can use the `head` command to see the first 6 lines. The `dim` command will tell you how many rows and columns the data frame has.

```{r}

# use head () to see the first few lines of the seqdata object. Remember to use tab completion to help find object names.

head (seqdata)
```

```{r}
# use dim () to see the dimensions - number of rows and columns

dim(seqdata)

```

Type sampleinfo to see the entire list of samples

```{r}

sampleinfo

```

## **Format the data**

Let’s create a new data object, `countdata`, that contains only the counts for the 12 samples.

```{r}
# Remove first two columns from seqdata and store the results in a variable called countdata

countdata <- seqdata[,-(1:2)]

# Look at the output
head(countdata)
```

```{r}
# Store EntrezGeneID as rownames

rownames(countdata) <- seqdata[,1]
```

have a look

```{r}
head(countdata)
```

Now take a look at the column names

```{r}

colnames(seqdata)

```

These are the sample names which are pretty long so we’ll shorten these to contain only the relevant information about each sample. We will use the `substr` command to extract the first 7 characters and use these as the colnames.

```{r}
# using substr, you extract the characters starting at position 1 and stopping at position 7 of the colnames
# full command
#colnames(countdata) <- substr(colnames(countdata),start=1,stop=7)

#shortened command
colnames(countdata) <- substr(colnames(countdata),1,7)


```

Take a look

```{r}
head(countdata)
```

Looks better

## **Convert counts to DGEList object**

We'll be using the EdgeR package to analyze the count data. EdgeR works on data organized in a specific format called the DGEList object. Here, we create a DGEList object to hold the data. This is an object used by *edgeR* to store count data. It has a number of slots for storing various parameters about the data. We will call this list y. Why? I don't know - that's how the authors did it. The DGEList() function is part of the EdgeR package. If it isn't recognized, you may need to revisit the step above where the EdgeR package was loaded (not installed, but loaded the library(EdgeR step.

```{r}

y <- DGEList(countdata)

```

Let's see what this objectlooks like

```{r}

#type y to show its contents.

y

```

This shows that this is a DGEList. A list is an R object that contains a series of things. A simple list might be a list of numbers or a list of names. But a list can contain pretty much anything. Each element could be a list - this would be a list of lists. In this case the list is a list of dataframes (tables). The first dataframe is called counts, the second is called samples. So it just took our two data files and organized them into a list.

Like with any list you can access individual components of the list using "dollar sign notation". So in this case we should be able to look at the counts table with y\$counts and the samples table with y\$samples. Let's see.

```{r}
y$counts
```

```{r}
y$samples
```

yep.

We can also add the groups for the samples to the DGEList object. The code below takes the cell type (basal, luminal) from the sampleinfo and the status info (virgin, pregnant, lactating) from the original tables and "pastes"them together and adds them to the variable group. This combines the categories as basal.pregnant, luminal.lactating, etc.

```{r}

group <- paste(sampleinfo$CellType,sampleinfo$Status,sep=".")

#look at the new categories

group
```

We will add this to the DGEList in a minute. But first, we need to make each of the categories in group into a factor. Factors are useful for organizing data. It allows R to automatically keep all basal samples together and all luminal samples together for example.

```{r}

4+2
```
